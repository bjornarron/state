lengder = read.csv("terning.csv", sep=",")
barplot(ylab="lengde",lengder$femcm)
lengder
lengder = read.csv("terning.csv", sep=",")
barplot(ylab="lengde",lengder$femcm)
lengder
lengder = read.csv("terning.csv", sep=",")
lengder
barplot(ylab="lengde",lengder$femcm)
data <- data.frame(x,y)
data <- data.frame(x=lengde,y=hoyde)
data <- data.frame(lengder$lengde,lengder$hoyde)
mean(data$lengder.lengde)
plot(data$lengder.lengde, data$lengder.hoyde)
model <- lm(data$lengder.hoyde ~ data$lengder.lengde, data)
abline(model, col="red")
barplot(ylab="lengde",lengder$femcm)
abline(model, col="red")
model
plot(6.37419 + 0.09572x)
model <- lm(data$lengder.hoyde ~ data$lengder.lengde)
abline(model, col="red")
model
View(data)
x = c(0, 1, 2, 3, 4)
X = cbind(x^0, x)
beta = solve(t(X) %*% X) %*% t(X) %*% y
beta = solve(t(X) %*% X) %*% t(X) %*% data$lengder.hoyde
x
X <- matrix(data$lengder.lengde, nrow = 20, ncol = 2)
x
X
col1 <- rep(1,length(x))
col1 <- rep(1,length(data$lengder.lengde))
X = cbind(data$lengder.lengde^0, data$lengder.lengde)
X
beta = solve(t(X) %*% X) %*% t(X) %*% data$lengder.hoyde
beta
solve(t(x)%*% x)
t(x)%*% x
crossprod(X)
result <- t(x) %*% x
result
solve(X^tX)
beta = solve(t(X) %*% X) %*% t(X) %*% data$lengder.hoyde
beta
t(X) %*% data$lengder.hoyde
beta = solve(t(X) %*% X) %*% t(X) %*% data$lengder.hoyde
beta
lengder = read.csv("terning.csv", sep=",")
lengder
data <- data.frame(lengder$lengde,lengder$hoyde)
mean(data$lengder.lengde)
plot(data$lengder.lengde, data$lengder.hoyde)
model <- lm(data$lengder.hoyde ~ data$lengder.lengde)
abline(model, col="red")
model
x = c(0, 1, 2, 3, 4)
X <- matrix(data$lengder.lengde, nrow = 20, ncol = 2)
col1 <- rep(1,length(data$lengder.lengde))
X = cbind(data$lengder.lengde^0, data$lengder.lengde)
X
X^tX <- crossprod(X)
solve(X^tX)
result <- t(x) %*% x
result
t(x)%*% x
beta = solve(t(X) %*% X) %*% t(X) %*% data$lengder.hoyde
beta
t(X) %*% data$lengder.hoyde
#Lager en matrise med alpha og beta = X
X = cbind(data$lengder.lengde^0, data$lengder.lengde)
#Lager en matrise med alpha og beta = X
X = cbind(data$lengder.lengde^0, data$lengder.lengde)
X
solve(X^tX)
solve(X^t(X))
result <- t(x) %*% x
result
t(x)%*% x
X^tX <- crossprod(X)
crossprod(X)
# Transponert Matrise X
t(X)
#Matrise X
X
# Transponert Matrise X
t(X)
# Produktet av X^t * X
result <- t(X) %*% X
result
t(x)%*% x
t(X)%*% X
solve(crossprod(X))
solve(t(X) %*% X)
#For å finne X^t * y(vektor):
t(X)*data$lengder.hoyde
#For å finne X^t * y(vektor):
t(X) %*% data$lengder.hoyde
beta = solve(t(X) %*% X) %*% t(X) %*% data$lengder.hoyde
beta
abline(model, col="red")
model
beta
lengder = read.csv("terning.csv", sep=",")
lengder
data <- data.frame(lengder$lengde,lengder$hoyde)
minX = data$lengder.lengde
minY = data$lengder.hoyde
#Plotte alle punktenne
plot(minX, minY, ylim = c(5,30), ylab = "Høyde, cm", xlab = "Lengde, cm")
model <- lm(minY ~ minX)
#Plotte regresjonslinjen
abline(model, col="red")
min_summary = summary(model)
model # Printer ut alpha og beta
alfa = min_summary$coefficients[1]
beta = min_summary$coefficients[2]
minPredY = alfa + minX * beta
#Plotte orange linjesegmenter mellom punktene og regresjonslinja
segments(minX,minY,minX,minPredY,col="orange")
SSe = (length(data$lengder.lengde)-2)*min_summary$sigma^2
n = length(data$lengder.lengde)
SSe
s_e = sqrt((1/(n-2))*SSe)
var(data.frame(minX, minY))
# --------------------------------------------------------------------------------------------------------
# Her ville vi bare teste om vi kunne rekne med matrisene i R Studio.
#Lager en matrise med alpha og beta = X
X = cbind(minX^0, minX)
#Printe ut matrise X
X
# Transponert Matrise X
t(X)
# Matrise X^t * X. 2x2 matrise
crossprod(X)
# Eller:
t(X)%*% X
#For å finne den inverse av X^t * X: (X^t * X)^-1
solve(t(X) %*% X)
#For å finne X^t * y(vektor):
t(X) %*% minY
beta = solve(t(X) %*% X) %*% t(X) %*% minY
beta
t(X) %*% minY
lengder = read.csv("terning.csv", sep=",")
lengder
data <- data.frame(lengder$lengde,lengder$hoyde)
minX = data$lengder.lengde
minY = data$lengder.hoyde
#Plotte alle punktenne
plot(minX, minY, ylim = c(5,30), ylab = "Høyde, cm", xlab = "Lengde, cm")
model <- lm(minY ~ minX)
#Plotte regresjonslinjen
abline(model, col="red")
min_summary = summary(model)
model # Printer ut alpha og beta
alfa = min_summary$coefficients[1]
beta = min_summary$coefficients[2]
minPredY = alfa + minX * beta
#Plotte orange linjesegmenter mellom punktene og regresjonslinja
segments(minX,minY,minX,minPredY,col="orange")
SSe = (length(data$lengder.lengde)-2)*min_summary$sigma^2
n = length(data$lengder.lengde)
SSe
s_e = sqrt((1/(n-2))*SSe)
var(data.frame(minX, minY))
# --------------------------------------------------------------------------------------------------------
# Her ville vi bare teste om vi kunne rekne med matrisene i R Studio.
#Lager en matrise med alpha og beta = X
X = cbind(minX^0, minX)
#Printe ut matrise X
X
# Transponert Matrise X
t(X)
# Matrise X^t * X. 2x2 matrise
crossprod(X)
# Eller:
t(X)%*% X
#For å finne den inverse av X^t * X: (X^t * X)^-1
solve(t(X) %*% X)
#For å finne X^t * y(vektor):
t(X) %*% minY
beta = solve(t(X) %*% X) %*% t(X) %*% minY
beta
t(X) %*% minY
minY
