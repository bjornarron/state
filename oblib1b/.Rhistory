# å se på ferdige datasett, så derfor skal vi kalle inn et fra nettet. Dere
# vet nå uansett hvordan man leser fra fil.
library(MASS)  # install.packages("MASS") må utføres før dette. Kjør alt i install.packages.R-fila!
help(Boston)   # Hva har du slags data?
head(Boston)
Boston[3,]     # 3. rad, altså et datasett
Boston[1:6,3]  # 3. kolonne, men kun element 1 til 6 så vi ikke får for mye
Industrien <-Boston$indus  # 3. kolonne, påkalt ved navn.
Industrien[1:6]   # Element 1 til 6 i denne kolonnen
library(tidyverse) # Sugar and spice, and everything nice! Nyttig bibliotek, altså.
OldBoston <- filter(Boston, age>80)   # Filtrerer rader og velger ut de med age>80
head(OldBoston)   # Vi ser at alle age er nå over 80.
GamleBoston<-Boston[Boston$age>80,]  # Mer kompakt metode; gjør samme som filter
head(GamleBoston)  # Samme som OldBoston
# Vi har da nok data til å leke oss med! Og vi har lært at en dataframe er en tabell
# der kolonnene har navn, slik at hver rad tilsvarer et sammenhørende datasett med
# verdier innenfor hver av de aktuelle variablene som kolonnene tilsvarer.
# Mesteparten av lekingen med data skal vi gjøre i senere moduler, men vi skal begynne
# med å tegne et såkalt histogram over den ene kolonnen vi hentet ut, Industrien:
hist(Industrien)
hist(Industrien,breaks=50,col="green") # Delt inn i 50 biter
hist(Industrien,breaks=200,col="blue") # Delt inn i 50 biter
hist(Industrien,breaks=c(0:7,10,seq(20,30,2)),col="maroon") # Variable søylebredder
c(0:7,10,seq(20,30,2))  # Eksperimenter med denne for å se hva du kan få
# For dere som virkelig vil få ting til å se pent ut, sjekk farger i fila Rcolor.pdf
library(tidyverse) # Sugar and spice, and everything nice!
library(datasets)  # https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html
library(roperators) # For kommandoen %+=%
library(plotrix)
# Vi begynner med kategoriske data, altså hvor observasjonene er TYPER:
help(chickwts)     # Dataene er chickwts fra biblioteket datasets. Hva har du slags data i chickwts?
head(chickwts)     # Se de første radene med data.
(x<-chickwts$feed) # Vi velger ut fôrtypen som våre data
(y<-table(x))      # Frekvenstabell over fôrtype
plot(x)            # Frekvensdiagram over fôrtype
barplot(y)         # Samme diagram, men barplot som kommando,
# og frekvenstabellen som input
plot(y)            # Plot, med frekvenstabellen som input
# Vi kan også lage kakediagram. Merk at vi ikke behøver sette argumentene col og main selv.
pie(y)             # Hvorfor pie(y) og ikke pie(x)? Prøv!
pie(table(x), col=c("blue", "red", "yellow", "pink", "green", "orange","brown"), main="Fôrtyper")
pie3D(table(x))  # eller et 3D kakediagram, for fancy presentasjon. Mer fancy:
pie3D(table(x), theta=pi/4, explode=0.1, labels=names(table(x)))
# Hvordan skriver vi inn egen tabell?
mTable<-table(c("a","b","a","c","a","b","a","c","a","c"))  # Hvis du har en liste over dataene
mTable
# Hvis du allerede har en frekvenstabell, så gjør du slik: (eksempel)
freq<-c(19,12,23)
verdier<-c("katt","hund","ugle")
mTable<-table(verdier)
mTable[verdier]<-freq
mTable
# Hvis du vil plotte, så legger du dataene inn i en dataRamme
library(ggplot2)      # Må påkalles en eller annen gang, men bare én gang, før du bruker ggplot-funksjonen.
mFrame<-data.frame(y=c(mTable)) # Gjør om tabellen til en enkel dataRamme
mFrame
ggplot(mFrame)+ geom_col(aes(x = rownames(mFrame), y = y))
# Men de viktigste dataene for oss er TALL-data:
# Hvordan legger vi inn våre egne tall-data?
# Vi legger inn noen data tilsvarende SEIGMANNOPPGAVEN som eksempel
## For fargetabell og -diagram, se "kategoriske data"
# Metode 1.  (Sjekk for å se hva du fikk inn ved å skrive x i konsollet)
x<-c(17.5,12.5,13,14.5,16,14.5) # Liste av rådata, alt lagt inn på en gang.
# Metode 2 (Sjekk ved å skrive x i konsollet for å se hva du fikk inn)
x<-c(); i<-0  # Initialiserer x som tom streng, og i=0. ";" = linjeskift i koden
x[i%+=%1]<-17.5 # Legger inn første datapunkt ...
x[i%+=%1]<-12.5 # så neste ... (indeksen i øker automagisk)
x[i%+=%1]<-13   # ... osv ...
x[i%+=%1]<-14.5
x[i%+=%1]<-16
x[i%+=%1]<-14.5 # ... til alle er inne
### Vise frem og behandle dataene
b<-0.5 # Bredden på gruppene av strekklengde
L<-12.25 # nedre grense for observerte strekklengder
U<-17.75 # øvre grense for observerte strekklengder
hist(x,breaks = seq(L,U,b),col="orangered")
# Metode 3. Frekvenstabell.
b<-0.5 # Bredden på gruppene av strekklengde
L<-11.75 # nedre grense for observerte strekklengder, minus b
U<-18.25 # øvre grense for observerte strekklengder, pluss b
(x<-seq(L,U,b)) # Liste av alle intervallmidtpunktene
f<-c(0,1,1,0,0,2,0,0,1,0,0,1,0) # Liste over alle frekvensene (antallene)
xHist <-list(breaks=x, counts=f) # Gjør om ...
class(xHist) <- "histogram"  # .. til histogram, så vi kan plotte pent.
plot(xHist,col="purple")     # Da bruker vi plot
# Metode 4. Lag tabell i Excel, lagre som .csv-fil.
z<-read.csv(file.choose()) # Åpner dialog for å finne filen.
plot(xHist,col="purple")     # ... som over.
library(tidyverse) # Sugar and spice, and everything nice!
library(datasets)  # https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html
library(roperators) # For kommandoen %+=%
library(plotrix)
# Vi begynner med kategoriske data, altså hvor observasjonene er TYPER:
help(chickwts)     # Dataene er chickwts fra biblioteket datasets. Hva har du slags data i chickwts?
head(chickwts)     # Se de første radene med data.
(x<-chickwts$feed) # Vi velger ut fôrtypen som våre data
(y<-table(x))      # Frekvenstabell over fôrtype
plot(x)            # Frekvensdiagram over fôrtype
barplot(y)         # Samme diagram, men barplot som kommando,
# og frekvenstabellen som input
plot(y)            # Plot, med frekvenstabellen som input
# Vi kan også lage kakediagram. Merk at vi ikke behøver sette argumentene col og main selv.
pie(y)             # Hvorfor pie(y) og ikke pie(x)? Prøv!
pie(table(x), col=c("blue", "red", "yellow", "pink", "green", "orange","brown"), main="Fôrtyper")
pie3D(table(x))  # eller et 3D kakediagram, for fancy presentasjon. Mer fancy:
pie3D(table(x), theta=pi/4, explode=0.1, labels=names(table(x)))
# Hvordan skriver vi inn egen tabell?
mTable<-table(c("a","b","a","c","a","b","a","c","a","c"))  # Hvis du har en liste over dataene
mTable
# Hvis du allerede har en frekvenstabell, så gjør du slik: (eksempel)
freq<-c(19,12,23)
verdier<-c("katt","hund","ugle")
mTable<-table(verdier)
mTable[verdier]<-freq
mTable
# Hvis du vil plotte, så legger du dataene inn i en dataRamme
library(ggplot2)      # Må påkalles en eller annen gang, men bare én gang, før du bruker ggplot-funksjonen.
mFrame<-data.frame(y=c(mTable)) # Gjør om tabellen til en enkel dataRamme
mFrame
ggplot(mFrame)+ geom_col(aes(x = rownames(mFrame), y = y))
# Men de viktigste dataene for oss er TALL-data:
# Hvordan legger vi inn våre egne tall-data?
# Vi legger inn noen data tilsvarende SEIGMANNOPPGAVEN som eksempel
## For fargetabell og -diagram, se "kategoriske data"
# Metode 1.  (Sjekk for å se hva du fikk inn ved å skrive x i konsollet)
x<-c(17.5,12.5,13,14.5,16,14.5) # Liste av rådata, alt lagt inn på en gang.
# Metode 2 (Sjekk ved å skrive x i konsollet for å se hva du fikk inn)
x<-c(); i<-0  # Initialiserer x som tom streng, og i=0. ";" = linjeskift i koden
x[i%+=%1]<-17.5 # Legger inn første datapunkt ...
x[i%+=%1]<-12.5 # så neste ... (indeksen i øker automagisk)
x[i%+=%1]<-13   # ... osv ...
x[i%+=%1]<-14.5
x[i%+=%1]<-16
x[i%+=%1]<-14.5 # ... til alle er inne
### Vise frem og behandle dataene
b<-0.5 # Bredden på gruppene av strekklengde
L<-12.25 # nedre grense for observerte strekklengder
U<-17.75 # øvre grense for observerte strekklengder
hist(x,breaks = seq(L,U,b),col="orangered")
# Metode 3. Frekvenstabell.
b<-0.5 # Bredden på gruppene av strekklengde
L<-11.75 # nedre grense for observerte strekklengder, minus b
U<-18.25 # øvre grense for observerte strekklengder, pluss b
(x<-seq(L,U,b)) # Liste av alle intervallmidtpunktene
f<-c(0,1,1,0,0,2,0,0,1,0,0,1,0) # Liste over alle frekvensene (antallene)
xHist <-list(breaks=x, counts=f) # Gjør om ...
class(xHist) <- "histogram"  # .. til histogram, så vi kan plotte pent.
plot(xHist,col="purple")     # Da bruker vi plot
# Metode 4. Lag tabell i Excel, lagre som .csv-fil.
z<-read.csv(file.choose()) # Åpner dialog for å finne filen.
z # Merk at z er en data.frame. Vi går ut fra at kolonnene heter x og f.
xHist <-list(breaks=z$x, counts=z$f) # Som over ...
class(xHist) <- "histogram"  # ...
plot(xHist,col="purple")     # ... som over.
library(tidyverse) # Sugar and spice, and everything nice!
library(datasets)  # https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html
help(trees)   # Hva har du slags data?
head(trees)   # Se de første radene med data.
# Kovarians og korrelasjon
cov(trees$Girth,trees$Volume) # kovarians. Innebygd funksjon i R. Omkrets vs Volum
cor(trees$Girth,trees$Volume) # korrelasjon. Innebygd funksjon i R. Omkrets vs Volum
cor(trees$Height,trees$Volume) # Høyde vs Volum
plot(trees$Height,trees$Volume,type="p",xlim=c(5,25),ylim=c(0,90),col="royalblue") # Lavere korrelasjon
plot(trees$Girth,trees$Volume,type="p",xlim=c(5,25),ylim=c(0,90),col="royalblue") # Høyere korrelasjon
x<-trees$Girth
y<-trees$Volume
# ... regne ut selv
xy<-x*y
x
y
xy
n<-length(xy)  # Lengdene på x, y og xy er like, så vi plukker bare en av dem. Antall observasjoner.
Sx<-sum(x)
Sy<-sum(y)
Sxy<-sum(xy)
SSxy<-Sxy-Sx*Sy/n
pCov<-SSxy/n      # Populasjonskovarians
sCov<-SSxy/(n-1)  # Utvalgskovarians
pSdx<-sqrt((sum(x^2)-sum(x)^2/n)/n)
sSdx<-sqrt((sum(x^2)-sum(x)^2/n)/(n-1))
pSdy<-sqrt((sum(y^2)-sum(y)^2/n)/n)
sSdy<-sqrt((sum(y^2)-sum(y)^2/n)/(n-1))
pCor<-pCov/(pSdx*pSdy)      # Populasjonskorrelasjon
sCor<-sCov/(sSdx*sSdy)      # Utvalgskorrelasjon, altså beste anslag på en større populasjon sin
# populasjonskorrelasjon ut fra våre data.
pCor # Populasjonskorrelasjon
sCor # Utvalgskorrelasjon. Ser du noe? :-)
regDat<-data.frame(x=x,y=y)  # Vi hentet x og y fra en data frame, og nå pakker vi dem inn i en igjen
lmDat<-lm(y~x,data=regDat)   # Hmm ... Hva er dette?
lmDat$coefficients           # Jaha ... to tall ... men ... ?
a<-lmDat$coefficients[1]     # a blir satt til det første tallet (den første koeffisienten)
b<-lmDat$coefficients[2]     # b blir satt til det andre tallet (den andre koeffisienten)
abline(a,b,col="red")        # ÅJA!!! a og b er koeffisientene i regresjonslinja! y = a + bx --- NICE!!
# Men vi skal regne ut regresjonslinja på "saktemåten" òg, altså for hånd. β = (X^T*X)^{-1}*X^T*y
# y er allerede på plass. Men vi skal lage matrisen X. Vi har ikke lagd matriser før.
X<-cbind(rep(1,n),x)                   # Erklærer X å være en n x 2 - matrise
X[,1]                                  # 1. kolonne er bare 1-tall
X[,2]                                  # 2. kolonne er x-verdiene
t(X)                                   # Den transponerte av X
t(X) %*% X                             # Matrisemultiplikasjon er t(X) %*% X og ikke som man skulle tro X^T * X
library(matlib)                        # For å kunne bruke inv. Bibliotek-kall kan gjerne samles på toppen.
beta<-inv(t(X)%*%X)%*%t(X)%*%y         # Koeffisientene til regresjonslinjen, etter formelen β = (X^T*X)^{-1}*X^T*y
beta                                   # Tallene vi fikk
lmDat$coefficients                     # Ingen overraskelse: Det er de samme tallene!
plot(x,y,type="p",col="royalblue")     # Plotter igjen. Denne gangen generisk for x og y
abline(beta[1],beta[2],col="red")      # ... og regresjonslinja, som vi nå har regnet ut SJØL !!
for (i in 1:n)
{
segments(x[i],y[i],x[i],a+b*x[i],col="orange")  # For hver x-verdi tegner vi en oransj linje fra punktet til linja. Residualene.
}
y-(a+b*x)                              # Residualene
sum((y-(a+b*x))^2)                     # Summen av kvadratet av residualene. Dette er SSe.
SSe<-t(y)%*%y-t(beta)%*%t(X)%*%X%*%beta  # Summen av kvadratet av residualene, regnet direkte fra formel. Vi foretrekker denne for å få mindre numerisk feil.
SSe                                    # Nesten likt sum((y-(a+b*x))^2), som forventet. Avviket er numerisk unøyaktighet.
se<-sqrt(SSe/(n-2))                    # "Standardfeilen" se. Tenk på det som et gjennomsnittlig avvik mellom punkt og linje, for enkelhets skyld.
se
print("Hei på du!")
library(tidyverse) # Sugar and spice, and everything nice!
library(datasets)  # https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html
library(roperators) # For kommandoen %+=%
library(plotrix)
# Vi begynner med kategoriske data, altså hvor observasjonene er TYPER:
help(chickwts)     # Dataene er chickwts fra biblioteket datasets. Hva har du slags data i chickwts?
head(chickwts)     # Se de første radene med data.
(x<-chickwts$feed) # Vi velger ut fôrtypen som våre data
(y<-table(x))      # Frekvenstabell over fôrtype
plot(x)            # Frekvensdiagram over fôrtype
barplot(y)         # Samme diagram, men barplot som kommando,
# og frekvenstabellen som input
plot(y)            # Plot, med frekvenstabellen som input
# Vi kan også lage kakediagram. Merk at vi ikke behøver sette argumentene col og main selv.
pie(y)             # Hvorfor pie(y) og ikke pie(x)? Prøv!
pie(table(x), col=c("blue", "red", "yellow", "pink", "green", "orange","brown"), main="Fôrtyper")
pie3D(table(x))  # eller et 3D kakediagram, for fancy presentasjon. Mer fancy:
pie3D(table(x), theta=pi/4, explode=0.1, labels=names(table(x)))
# Hvordan skriver vi inn egen tabell?
mTable<-table(c("a","b","a","c","a","b","a","c","a","c"))  # Hvis du har en liste over dataene
mTable
# Hvis du allerede har en frekvenstabell, så gjør du slik: (eksempel)
freq<-c(19,12,23)
verdier<-c("katt","hund","ugle")
mTable<-table(verdier)
mTable[verdier]<-freq
mTable
# Hvis du vil plotte, så legger du dataene inn i en dataRamme
library(ggplot2)      # Må påkalles en eller annen gang, men bare én gang, før du bruker ggplot-funksjonen.
mFrame<-data.frame(y=c(mTable)) # Gjør om tabellen til en enkel dataRamme
mFrame
ggplot(mFrame)+ geom_col(aes(x = rownames(mFrame), y = y))
# Men de viktigste dataene for oss er TALL-data:
# Hvordan legger vi inn våre egne tall-data?
# Vi legger inn noen data tilsvarende SEIGMANNOPPGAVEN som eksempel
## For fargetabell og -diagram, se "kategoriske data"
# Metode 1.  (Sjekk for å se hva du fikk inn ved å skrive x i konsollet)
x<-c(17.5,12.5,13,14.5,16,14.5) # Liste av rådata, alt lagt inn på en gang.
# Metode 2 (Sjekk ved å skrive x i konsollet for å se hva du fikk inn)
x<-c(); i<-0  # Initialiserer x som tom streng, og i=0. ";" = linjeskift i koden
x[i%+=%1]<-17.5 # Legger inn første datapunkt ...
x[i%+=%1]<-12.5 # så neste ... (indeksen i øker automagisk)
x[i%+=%1]<-13   # ... osv ...
x[i%+=%1]<-14.5
x[i%+=%1]<-16
x[i%+=%1]<-14.5 # ... til alle er inne
### Vise frem og behandle dataene
b<-0.5 # Bredden på gruppene av strekklengde
L<-12.25 # nedre grense for observerte strekklengder
U<-17.75 # øvre grense for observerte strekklengder
hist(x,breaks = seq(L,U,b),col="orangered")
# Metode 3. Frekvenstabell.
b<-0.5 # Bredden på gruppene av strekklengde
L<-11.75 # nedre grense for observerte strekklengder, minus b
U<-18.25 # øvre grense for observerte strekklengder, pluss b
(x<-seq(L,U,b)) # Liste av alle intervallmidtpunktene
f<-c(0,1,1,0,0,2,0,0,1,0,0,1,0) # Liste over alle frekvensene (antallene)
xHist <-list(breaks=x, counts=f) # Gjør om ...
class(xHist) <- "histogram"  # .. til histogram, så vi kan plotte pent.
plot(xHist,col="purple")     # Da bruker vi plot
# Metode 4. Lag tabell i Excel, lagre som .csv-fil.
z<-read.csv(file.choose()) # Åpner dialog for å finne filen.
library(tidyverse)   # Dette er et greit standard-bibliotek.
library(roperators)  # Vi bruker %+=% fra dette biblioteket
print("Hello World!") # Slik starter man alltid læring av et dataspråk
2+2                   # ... og slik et regnespråk
a <- 5                # Hovedmåten å sette en variabel i R er pila
a
# Hvis vi vil BÅDE sette verdien OG vise den frem, setter vi parentes rundt:
(A <- 5)              # Setter A=5, OG skriver ut denne verdien, samtidig.
A                     # Ok, vi bare sjekker denne ene gangen, og ja, vi fikk verdien på A første gang!
(b = "Lure ord")      # ... men = funker også, nesten alltid. Nesten.
(2:7 -> c)            # Pila kan også gå andre veien. Men hva blir dette? (Se output)
a+5
paste(b," og ",b," og enda flere ",b)  # Slå sammen tekststrenger
c+3                   # Legger 3 til samtlige elementer
2*c                   # Ganger samtlige elementer med 3
(d <- seq(2,7,0.2))   # Som 2:7, men styrer steglengde. Her er den da 0.2
(e <- c(2,3,6,6.2,6.5,7))   # Om du vil spesifisere hvert enkelt element
c+e                   # Vektorer av lik lengde kan legges sammen, element for element
c*e                   # Vektorer av lik lengde kan ganges sammen, element for element
c-e                   # Vektorer av lik lengde subtraheres, element for element
c/e                   # Vektorer av lik lengde kan deles, element for element
c^e                   # Vektorer av lik lengde kan eksponentieres, element for element
(f <- rep(2,30))      # Noen ganger vil man bare ha det samme om igjen
a
a %+=% 2              # Krever biblioteket roperators
a                     # Kan du se hva %+=% gjør?
f[a %+=% 2]<--99      # Inspiser både f og a for å se hva som skjedde nå
# Nå som vi kan vektorer, så kan vi også se på matriser:
X<-matrix(1:18, nrow = 6, ncol = 3)    # Erklærer X å være en 6 x 3 - matrise, altså 6 rader og 3 kolonner
X[,1]=rep(1,6)                         # 1. kolonne er bare 1-tall
X[,2]=4:9                              # 2. kolonne er tallene 4 til 9
X[,3]=e                                # 3. kolonne er e
X                                      # Inspisere X for å se at vi har det vi vil. det har vi.
t(X)                                   # Den transponerte av X
(A<-t(X) %*% X)                        # Matrisemultiplikasjon AB er A %*% B og ikke som man skulle tro A * B.Dimensjonene må matche.
solve(A)                               # Den inverse av en matrise finner du med kommandoen solve
# For noen av dere er dette det første biblioteket dere laster. Se install.packages.R og kjør den først!
library(matlib)                        # For en alternativ måte å ta invers på, som er lettere å huske
Inverse(A)                             # Samme jobb, lettere navn å huske for operasjonen enn solve
inv(A)                                 # inv er like greit, og kortere. Samme resultat fra alle 3 metoder, så klart.
t(X)%*%e                               # Matriser ganges med vektorer likedan som med hverandre. Dimensjonene må matche.
for (i in -1:4)                 # Dette er ei løkke, der i starter på -1, og øker med 1 for hver runde, opp til og med 4
{                               # { betyr starten på koden i løkka.
print(paste("Runde",i))      # Kommandoen vår her er at vi skriver ut runden i hver runde
}                               # { betyr slutten på koden i løkka.
square <- function(x)           # Slik definerer man funksjon i R.
{                               # { betyr starten på koden i funksjonen.
sin(x)                        # Kode som utføres. MEN: Sist beregnede verdi
x^2                           # er funksjonens output, så output er x^2, ikke sin(x)
}                               # { betyr slutten på koden i funksjonen.
# Generelt: fNavn <- function(x1,x2, ... ) {beregning med argumentene x1, x2 osv}
square(3)                       # fNavn(x1,x2, ...) er måten vi bruker funksjonen på
c                             # Påminner på den gamle lista vår, c
square(c)                     # Funksjonen anvendes på alle elementer i en liste
plot(seq(-3,9,0.01),square(seq(-3,9,0.01)),type="l",xlim=c(-2,8),ylim=c(-10,100),col=rgb(0.8,0.2,0))
# Gå i vinduet du ser grafen, og se på "Help" for å få sett alle grafiske alternativer
# Der skriver du "plot", og så scroller du til "Help pages" og trykker på "base::plot"
# Slik lager du et diskret plott:
plot(seq(-3,9,0.5),square(seq(-3,9,0.5)),type="h",xlim=c(-2,8),ylim=c(-1,60),col=rgb(0,0.8,0.2),lwd=3)
# Men du kan få med deg flere ting i ett plott ved å følge opp med kommandoene
# lines og points
lines(seq(-3,9,0.01),square(seq(-3,9,0.01)),type="l",col=rgb(0.8,0.2,0))
points(c(0,3.5,6),square(c(0,3.5,6)),type="p",col=rgb(0,0,0.8))
# Punktet behøver ikke ha noe med det tidligere å gjøre ...
points(1,30,type="p",xlim=c(-2,8),ylim=c(-10,100),col=rgb(0.8,0,0.8))
text(1,20,"Randomz punkt",srt=45,col=rgb(0.8,0,0.8))
# Hvis du vil illustrere integralet av x^2 fra 2 til 6 kan du gjøre slik:
plot(seq(-3,9,0.01),square(seq(-3,9,0.01)),type="l",xlim=c(-2,8),ylim=c(-0.1,60),col=rgb(0.8,0.2,0))
lines(seq(2,6,0.01),square(seq(2,6,0.01)),type="h",col=rgb(0.9,0.7,0))
lines(seq(-3,9,0.01),square(seq(-3,9,0.01)),type="l",col=rgb(0.8,0.2,0))
abline(v=c(2,6),col=c("green","blue"),lwd=c(3,1,1),lty=c(1,5))
segments(2,0,6,0,col=rgb(0.5,0.5,0.5),lwd=2)
segments(-2,50,0,20,col=rgb(0.5,0,0.5),lwd=2)
text(-1,40,"Randomz linjesegment",srt=-50,col=rgb(0.8,0,0.8))
# Selve integralet kan du også regne ut, egentlig på samme måte, som en sum av rektangler med gitt bredde dx
dx<-0.001
sum(dx*square(seq(-3,9,dx))) # integralet som sum
integrate(square,-3,9)       # innebygd integrasjon i R
# Men du kan også integrere ved å plukke N tilfeldige tall i intervallet.
# Dette er egentlig basics for avanserte statistiske simuleringer. (!!)
N<-200000
a<-(-3)
b<-9
samples<-runif(N,a,b)
sum(((b-a)/N)*square(samples))
# Hvorfor blir det forskjellig svar hver gang du kjører?
# Sjekk hvordan de tilfeldige tallene er fordelt for hver gang. Så kjør linje 82-89 sammen.
hist(samples)
# Å skrive data til en fil
write.csv(c(2,3,4,6,8,0),file="minCSVfil.csv")
# Let nå opp og gå inn i CSV-fila, og gjør en liten endring i to tall.
# Les den så inn igjen
(g <- read.csv(file="minCSVfil.csv"))
g$x   # Vi ser ikke på hele g, men på kolonne x
# Så vi ser innlesing gir oss noe annet enn vektoren vi skrev ut. Det vi
# får inn heter en Data Frame, som er en slags tabell. Det er mer spennende
# å se på ferdige datasett, så derfor skal vi kalle inn et fra nettet. Dere
# vet nå uansett hvordan man leser fra fil.
library(MASS)  # install.packages("MASS") må utføres før dette. Kjør alt i install.packages.R-fila!
help(Boston)   # Hva har du slags data?
head(Boston)
Boston[3,]     # 3. rad, altså et datasett
Boston[1:6,3]  # 3. kolonne, men kun element 1 til 6 så vi ikke får for mye
Industrien <-Boston$indus  # 3. kolonne, påkalt ved navn.
Industrien[1:6]   # Element 1 til 6 i denne kolonnen
library(tidyverse) # Sugar and spice, and everything nice! Nyttig bibliotek, altså.
OldBoston <- filter(Boston, age>80)   # Filtrerer rader og velger ut de med age>80
head(OldBoston)   # Vi ser at alle age er nå over 80.
GamleBoston<-Boston[Boston$age>80,]  # Mer kompakt metode; gjør samme som filter
head(GamleBoston)  # Samme som OldBoston
# Vi har da nok data til å leke oss med! Og vi har lært at en dataframe er en tabell
# der kolonnene har navn, slik at hver rad tilsvarer et sammenhørende datasett med
# verdier innenfor hver av de aktuelle variablene som kolonnene tilsvarer.
# Mesteparten av lekingen med data skal vi gjøre i senere moduler, men vi skal begynne
# med å tegne et såkalt histogram over den ene kolonnen vi hentet ut, Industrien:
hist(Industrien)
hist(Industrien,breaks=50,col="green") # Delt inn i 50 biter
hist(Industrien,breaks=200,col="blue") # Delt inn i 50 biter
hist(Industrien,breaks=c(0:7,10,seq(20,30,2)),col="maroon") # Variable søylebredder
c(0:7,10,seq(20,30,2))  # Eksperimenter med denne for å se hva du kan få
# For dere som virkelig vil få ting til å se pent ut, sjekk farger i fila Rcolor.pdf
print("Hello World!")
print("Hello World!")
lengder = read.csv("terning.csv", sep=",")
lengder
data <- data.frame(lengder$lengde,lengder$hoyde)
minX = data$lengder.lengde
minY = data$lengder.hoyde
#Plotte alle punktenne
plot(minX, minY, ylim = c(5,30), ylab = "Høyde, cm", xlab = "Lengde, cm")
model <- lm(minY ~ minX)
#Plotte regresjonslinjen
abline(model, col="red")
min_summary = summary(model)
model # Printer ut alpha og beta
alfa = min_summary$coefficients[1]
beta = min_summary$coefficients[2]
minPredY = alfa + minX * beta
#Plotte orange linjesegmenter mellom punktene og regresjonslinja
segments(minX,minY,minX,minPredY,col="orange")
SSe = (length(data$lengder.lengde)-2)*min_summary$sigma^2
n = length(data$lengder.lengde)
SSe
s_e = sqrt((1/(n-2))*SSe)
var(data.frame(minX, minY))
lengder = read.csv("terning.csv", sep=",")
lengder
data <- data.frame(lengder$lengde,lengder$hoyde)
minY = data$lengder.lengde
minX = data$lengder.hoyde
#Plotte alle punktenne
plot(minX, minY, ylim = c(5,30), ylab = "Høyde, cm", xlab = "Lengde, cm")
model <- lm(minY ~ minX)
#Plotte regresjonslinjen
abline(model, col="red")
min_summary = summary(model)
model # Printer ut alpha og beta
alfa = min_summary$coefficients[1]
beta = min_summary$coefficients[2]
minPredY = alfa + minX * beta
#Plotte orange linjesegmenter mellom punktene og regresjonslinja
segments(minX,minY,minX,minPredY,col="orange")
SSe = (length(data$lengder.lengde)-2)*min_summary$sigma^2
n = length(data$lengder.lengde)
SSe
s_e = sqrt((1/(n-2))*SSe)
var(data.frame(minX, minY))
lengder = read.csv("terning.csv", sep=",")
lengder
data <- data.frame(lengder$lengde,lengder$hoyde)
minY = data$lengder.lengde
minX = data$lengder.hoyde
#Plotte alle punktenne
plot(minX, minY, ylab = "Sprettlengde, cm", xlab = "Dropphøyde, cm")
model <- lm(minY ~ minX)
#Plotte regresjonslinjen
abline(model, col="red")
min_summary = summary(model)
model # Printer ut alpha og beta
alfa = min_summary$coefficients[1]
beta = min_summary$coefficients[2]
minPredY = alfa + minX * beta
#Plotte orange linjesegmenter mellom punktene og regresjonslinja
segments(minX,minY,minX,minPredY,col="orange")
SSe = (length(data$lengder.lengde)-2)*min_summary$sigma^2
n = length(data$lengder.lengde)
SSe
s_e = sqrt((1/(n-2))*SSe)
var(data.frame(minX, minY))
lengder = read.csv("terning.csv", sep=",")
lengder
data <- data.frame(lengder$lengde,lengder$hoyde)
minY = data$lengder.lengde
minX = data$lengder.hoyde
#Plotte alle punktenne
plot(minX, minY, ylab = "Sprettlengde, cm", xlab = "Dropphøyde, cm")
model <- lm(minY ~ minX)
#Plotte regresjonslinjen
abline(model, col="red")
min_summary = summary(model)
min_summary # Printer ut alpha og beta
# Lag dataframe for dataene
student_data <- data.frame(
line = c(rep("Line 1", 5), rep("Line 2", 5), rep("Line 3", 5), rep("Line 4", 5)),
laptops = c(2, 3, 1, 4, 2, 4, 3, 2, 1, 4, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4),
operating_system = c(rep("Windows", 10), rep("MacOS", 5), rep("Linux", 5))
)
# Se på dataene
head(student_data)
library(ggplot2)
ggplot(student_data, aes(x = laptops, y = line, color = operating_system)) +
geom_point() +
xlab("Antall datamaskiner") +
ylab("Linje") +
ggtitle("Antall datamaskiner og operativsystem etter linje") +
scale_color_discrete(name = "Operativsystem")
# Lag dataframe for dataene
student_data <- data.frame(
line = c(rep("Softwear", 5), rep("Nettverk", 5), rep("Bygg", 5), rep("AI", 5)),
laptops = c(2, 3, 1, 4, 2, 4, 3, 2, 1, 4, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4),
operating_system = c(rep("Windows", 10), rep("MacOS", 5), rep("Linux", 5))
)
# Se på dataene
head(student_data)
library(ggplot2)
ggplot(student_data, aes(x = laptops, y = line, color = operating_system)) +
geom_point() +
xlab("Antall datamaskiner") +
ylab("Linje") +
ggtitle("Antall datamaskiner og operativsystem etter linje") +
scale_color_discrete(name = "Operativsystem")
student_data <- read.csv("data.csv")
student_data <- read.csv("data.csv")
